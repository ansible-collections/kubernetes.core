---
- block:
    - name: Set variables
      set_fact:
        namespace: "{{ test_namespace }}"
        k8s_wait_timeout: 180
    - name: Create a deployment
      k8s:
        state: present
        wait: yes
        wait_timeout: "{{ k8s_wait_timeout }}"
        inline: &deploy
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deploy
            labels:
              app: nginx
            namespace: "{{ namespace }}"
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.17
                    ports:
                      - containerPort: 80

    - name: Crash the existing deployment
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deploy
            labels:
              app: nginx
            namespace: "{{ namespace }}"
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.0.23449928384992872784
                    ports:
                      - containerPort: 80
      ignore_errors: yes
      register: crash

    - name: Assert that the Deployment failed
      assert:
        that:
          - crash is failed

    - name: Read the deployment
      k8s_info:
        kind: Deployment
        name: nginx-deploy
        namespace: "{{ namespace }}"
      register: deployment

    - set_fact:
        failed_version: "{{ deployment.resources[0].metadata.annotations['deployment.kubernetes.io/revision'] }}"

    - name: Rolling Back the crashed deployment (check mode)
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: nginx-deploy
        namespace: "{{ namespace }}"
      register: result
      check_mode: yes

    - assert:
        that:
          - result is changed

    - name: Read the deployment
      k8s_info:
        kind: Deployment
        name: nginx-deploy
        namespace: "{{ namespace }}"
      register: deployment

    - name: Validate that Rollback using check_mode did not changed the Deployment
      assert:
        that:
          - failed_version == deployment.resources[0].metadata.annotations['deployment.kubernetes.io/revision']

    - name: Rolling Back the crashed deployment
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: nginx-deploy
        namespace: "{{ namespace }}"
      register: result

    - name: assert rollback is changed
      assert:
        that:
          - result is changed

    - name: Read the deployment once again
      k8s_info:
        kind: Deployment
        name: nginx-deploy
        namespace: "{{ namespace }}"
      register: deployment

    - name: Validate that Rollback changed the Deployment
      assert:
        that:
          - failed_version | int + 1 == deployment.resources[0].metadata.annotations['deployment.kubernetes.io/revision'] | int

    - name: Create a DaemonSet
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: fluentd-elasticsearch
            namespace: "{{ namespace }}"
            labels:
              k8s-app: fluentd-logging
          spec:
            selector:
              matchLabels:
                name: fluentd-elasticsearch
            template:
              metadata:
                labels:
                  name: fluentd-elasticsearch
              spec:
                tolerations:
                  - key: node-role.kubernetes.io/master
                    effect: NoSchedule
                containers:
                  - name: fluentd-elasticsearch
                    image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
                    resources:
                      limits:
                        memory: 200Mi
                      requests:
                        cpu: 100m
                        memory: 200Mi
                    volumeMounts:
                      - name: varlog
                        mountPath: /var/log
                      - name: varlibdockercontainers
                        mountPath: /var/lib/docker/containers
                        readOnly: true
                terminationGracePeriodSeconds: 30
                volumes:
                  - name: varlog
                    hostPath:
                      path: /var/log
                  - name: varlibdockercontainers
                    hostPath:
                      path: /var/lib/docker/containers

    - name: Crash the existing DaemonSet
      k8s:
        state: present
        wait: yes
        wait_timeout: "{{ k8s_wait_timeout | default(omit) }}"
        definition:
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: fluentd-elasticsearch
            namespace: "{{ namespace }}"
            labels:
              k8s-app: fluentd-logging
          spec:
            selector:
              matchLabels:
                name: fluentd-elasticsearch
            template:
              metadata:
                labels:
                  name: fluentd-elasticsearch
              spec:
                tolerations:
                  - key: node-role.kubernetes.io/master
                    effect: NoSchedule
                containers:
                  - name: fluentd-elasticsearch
                    image: quay.io/fluentd_elasticsearch/fluentd:v2734894949
                    resources:
                      limits:
                        memory: 200Mi
                      requests:
                        cpu: 100m
                        memory: 200Mi
                    volumeMounts:
                      - name: varlog
                        mountPath: /var/log
                      - name: varlibdockercontainers
                        mountPath: /var/lib/docker/containers
                        readOnly: true
                terminationGracePeriodSeconds: 30
                volumes:
                  - name: varlog
                    hostPath:
                      path: /var/log
                  - name: varlibdockercontainers
                    hostPath:
                      path: /var/lib/docker/containers
      register: crash
      ignore_errors: yes

    - name: Assert that the Daemonset failed
      assert:
        that:
          - crash is failed

    - name: Read the crashed DaemonSet
      k8s_info:
        kind: DaemonSet
        name: fluentd-elasticsearch
        namespace: "{{ namespace }}"
      register: result

    - set_fact:
        failed_version: "{{ result.resources[0].metadata.annotations['deprecated.daemonset.template.generation'] }}"

    - name: Rolling Back the crashed DaemonSet (check_mode)
      k8s_rollback:
        api_version: apps/v1
        kind: DaemonSet
        name: fluentd-elasticsearch
        namespace: "{{ namespace }}"
      register: result
      check_mode: yes

    - name: Read the DaemonSet
      k8s_info:
        kind: DaemonSet
        name: fluentd-elasticsearch
        namespace: "{{ namespace }}"
      register: result

    - name: Validate that Rollback using check_mode did not changed the DaemonSet version
      assert:
        that:
          - failed_version == result.resources[0].metadata.annotations['deprecated.daemonset.template.generation']

    - name: Rolling Back the crashed DaemonSet
      k8s_rollback:
        api_version: apps/v1
        kind: DaemonSet
        name: fluentd-elasticsearch
        namespace: "{{ namespace }}"
      register: result

    - name: assert rollback is changed
      assert:
        that:
          - result is changed

    - name: Read the DaemonSet
      k8s_info:
        kind: DaemonSet
        name: fluentd-elasticsearch
        namespace: "{{ namespace }}"
      register: result

    - name: Validate that Rollback changed the Daemonset version
      assert:
        that:
          - failed_version | int + 1 == result.resources[0].metadata.annotations['deprecated.daemonset.template.generation'] | int

    - name: Create deployment with specific labels for selector testing
      k8s:
        state: present
        wait: yes
        wait_timeout: "{{ k8s_wait_timeout }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-labeled
            namespace: "{{ namespace }}"
            labels:
              app: nginx
              test-group: label-selector-test
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nginx-labeled
            template:
              metadata:
                labels:
                  app: nginx-labeled
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.17
                    ports:
                      - containerPort: 80

    - name: Update deployment to create second revision
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-labeled
            namespace: "{{ namespace }}"
            labels:
              app: nginx
              test-group: label-selector-test
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nginx-labeled
            template:
              metadata:
                labels:
                  app: nginx-labeled
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.18
                    ports:
                      - containerPort: 80

    - name: Test rollback with label selectors
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: nginx-labeled
        namespace: "{{ namespace }}"
        label_selectors:
          - "test-group=label-selector-test"
      register: result

    - name: Assert label selector rollback worked
      assert:
        that:
          - result is changed
          - result.rollback_info | length == 1
          - result.rollback_info[0].method == "patch"

    - name: Create deployment with single revision
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: single-revision
            namespace: "{{ namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: single-revision
            template:
              metadata:
                labels:
                  app: single-revision
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.17
                    ports:
                      - containerPort: 80

    - name: Try to rollback deployment with no previous revisions
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: single-revision
        namespace: "{{ namespace }}"
      register: result

    - name: Assert warning is returned for no rollout history
      assert:
        that:
          - not result.changed
          - result.rollback_info[0].warnings is defined
          - "'No rollout history found' in result.rollback_info[0].warnings[0]"

    - name: Create a service for unsupported resource test
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: test-service
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: nginx
            ports:
              - port: 80
                targetPort: 80

    - name: Test rollback on unsupported resource type
      k8s_rollback:
        api_version: v1
        kind: Service
        name: test-service
        namespace: "{{ namespace }}"
      register: result
      ignore_errors: yes

    - name: Assert error message for unsupported resource
      assert:
        that:
          - not result.changed
          - "'Cannot perform rollback on resource of kind Service' in result.msg"

    - name: Test rollback on non-existent deployment
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: non-existent
        namespace: "{{ namespace }}"
      register: result

    - name: Assert no resources found
      assert:
        that:
          - not result.changed
          - result.rollback_info | length == 0

    - name: Create multiple deployments with same label
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "multi-{{ item }}"
            namespace: "{{ namespace }}"
            labels:
              group: multi-test
              app: multi
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "multi-{{ item }}"
            template:
              metadata:
                labels:
                  app: "multi-{{ item }}"
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.17
                    ports:
                      - containerPort: 80
      loop: [1, 2, 3]

    - name: Update multiple deployments to create second revisions
      k8s:
        state: present
        wait: yes
        wait_timeout: 30
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "multi-{{ item }}"
            namespace: "{{ namespace }}"
            labels:
              group: multi-test
              app: multi
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "multi-{{ item }}"
            template:
              metadata:
                labels:
                  app: "multi-{{ item }}"
              spec:
                containers:
                  - name: nginx
                    image: nginx:1.18
                    ports:
                      - containerPort: 80
      loop: [1, 2, 3]

    - name: Rollback multiple deployments using label selector
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: "multi-{{ item }}"
        namespace: "{{ namespace }}"
        label_selectors:
          - "group=multi-test"
      register: result
      loop: [1, 2, 3]

    - name: Assert multiple resources were rolled back
      assert:
        that:
          - result.results | length == 3
          - result.results | selectattr('changed', 'equalto', true) | list | length == 3
          - result.results | selectattr('rollback_info', 'defined') | list | length == 3
          - result.results | map(attribute='rollback_info') | map('first') | map(attribute='method') | select('equalto', 'patch') | list | length == 3

    - name: Validate rollback_info structure for deployment
      assert:
        that:
          - result.results is defined
          - result.results[0].rollback_info is defined
          - result.results[0].rollback_info | length > 0
          - result.results[0].rollback_info[0].method == "patch"
          - result.results[0].rollback_info[0].body is defined
          - result.results[0].rollback_info[0].resources is defined
          - result.results[0].rollback_info[0].resources.metadata is defined
          - result.results[0].rollback_info[0].resources.spec is defined

    - name: Test rollback with field selectors
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: multi-1
        namespace: "{{ namespace }}"
        field_selectors:
          - "metadata.name=multi-1"
      register: result

    - name: Assert field selector rollback worked
      assert:
        that:
          - result is changed
          - result.rollback_info | length == 1
          - result.rollback_info[0].resources.metadata.name == "multi-1"

    - name: Test check mode return values
      k8s_rollback:
        api_version: apps/v1
        kind: Deployment
        name: multi-2
        namespace: "{{ namespace }}"
      register: result
      check_mode: yes

    - name: Validate check mode returns expected structure
      assert:
        that:
          - result is changed
          - result.rollback_info is defined
          - result.rollback_info[0].method == "patch"
          - result.rollback_info[0].body is defined

  always:
    - name: Delete {{ namespace }} namespace
      k8s:
        name: "{{ namespace }}"
        kind: Namespace
        api_version: v1
        state: absent
      ignore_errors: yes
